# Default values for  hlf-peer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: hyperledger/fabric-peer
  tag: 1.4.1
  pullPolicy: IfNotPresent
  dindImage: docker
  dindTag: 18.05-dind


service:
  # Cluster IP or LoadBalancer
  type: NodePort
  portRequest: 7051
  portEvent: 7053
  portNodePortRequest: 30110
  portNodePortEvent: 30112

ingress:
  enabled: false

persistence:
  enabled: true
  annotations: {}
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "manual"
  accessMode: ReadWriteOnce
  size: 1Gi
  # existingClaim: ""
  volume:
    hostPath: /fabric-network/%REMOTE_PEER_NAME%

##################################
## Peer configuration options    #
##################################
peer:
  mspID: %ORGMSP_ID%
  # Type of database ("goleveldb" or "CouchDB"):
  databaseType: goleveldb
  tls:
    server:
      enabled: "true"
    client:
      enabled: "false"
  gossip:
    bootstrap: %BOOTSTRAP_PEER%
  orderer: 
    address: %ORDERER%
  channel:
    name: %CHANNEL%

# Secrets references, empty by default, fill in with your secrets (particularly adminCert) or add Peer Admin certificate manually after launching chart.
secrets:
  ## These secrets should contain the Orderer crypto materials and credentials
  peer:
    # Credentials, saved under keys 'CA_USERNAME' and 'CA_PASSWORD'
    cred: hlf--%REMOTE_PEER_NAME%-cred
    # Certificate, saved under key 'cert.pem'
    cert: hlf--%REMOTE_PEER_NAME%-idcert
    # Key, saved under 'key.pem'
    key: hlf--%REMOTE_PEER_NAME%-idkey
    # CA Cert, saved under 'cacert.pem'
    caCert: hlf--%REMOTE_PEER_NAME%-cacert
    # TLS CA Cert (Peer Org's TLS CA root cert), saved under 'tlscacert.pem'
    tlsCaCert: hlf--%REMOTE_PEER_NAME%-tlscacert
    # # Intermediate CA Cert (optional), saved under 'intermediatecacert.pem'
    # intCaCert: hlf--%REMOTE_PEER_NAME%-caintcert
    # TLS secret, saved under keys 'tls.crt' and 'tls.key' (to conform with K8S nomenclature)
    tls: hlf--%REMOTE_PEER_NAME%-tls
    # TLS root CA certificate saved under key 'cacert.pem'
    tlsRootCert: hlf--%ORGMSP_ID%-tlsrootcert
    # TLS client root CA certificates saved under any names (as there may be multiple)
    #tlsClient: hlf--%REMOTE_PEER_NAME%-tls
    # # TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClientRootCerts: hlf--%ORGMSP_ID%-ord-tlsrootcert
  ## This should contain "channel" transaction derived from a configtx.yaml
  ## configtxgen -profile ComposerChannel -channelID composerchannel -outputCreateChannelTx composerchannel.tx
  # channel: hlf--channel
  # This should contain the Certificate of the Peer Organisation admin
  # This is necessary to successfully run the peer
  adminCert: hlf--%ORGMSP_ID%-admincert
  # This should contain the Private Key of the Peer Organisation admin
  # This is necessary to successfully join a channel
  adminKey: hlf--%ORGMSP_ID%-adminkey
  # This should include the Orderer TLS 'cacert.pem'
  ordTlsRootCert: hlf--%ORGMSP_ID%-ord-tlsrootcert

resources: {}
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
  ## Suggested antiAffinity, as each Peer should be on a separate Node for resilience
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
  #           app: hlf-peer
